# generates csharp client code from a swagger definition file

param (
    [string]$swaggerFileUrl = "https://localhost:5001/swagger/v1/swagger.json",
    [string]$clientOutputDirectoryPath = "../src/clients/azure-masterclass/src/domain/api/",
    [string]$clientName = "ApiClient"
)

# this script requires Java runtime to be installed
# IMPORTANT: run the appropriate AF!

$ErrorActionPreference = "Stop"

# variables
$tempDirectoryPath = Join-Path $PSScriptRoot "./temp"
$isAutorestInstalled = npm list autorest | Select-String -Pattern "(empty)" -NotMatch -Quiet
$isSwaggerFileUrlAvailable = $true
$tempSwaggerFilePath = Join-Path -Path $tempDirectoryPath -ChildPath "swagger.json"
$tempSrcDirectoryPath = Join-Path $tempDirectoryPath "./src"

# install autorest
if (-Not $isAutorestInstalled)
{
    Write-Host "Installing autorest" -ForegroundColor Magenta

    npm install -g autorest
}

# remove temp files
if (Test-Path -Path "$tempDirectoryPath")
{
    Remove-Item -Path "$tempDirectoryPath" -Recurse
}

New-Item -Path "$tempDirectoryPath" -ItemType Directory
New-Item -Path "$tempSrcDirectoryPath" -ItemType Directory
    
# Dowload the swager file
try
{
    Invoke-WebRequest -Uri $swaggerFileUrl -OutFile $tempSwaggerFilePath
}
catch
{
    $isSwaggerFileUrlAvailable = $false
}

if ($isSwaggerFileUrlAvailable)
{
    Write-Host "Generating TypeScript code for $clientName" -ForegroundColor Magenta

    # generate typescript client
    autorest --verbose --typescript --input-file="$tempSwaggerFilePath" --output-folder="$tempDirectoryPath" --clear-output-folder --override-client-name="$clientName"

    # add disable eslint comment at the top
    foreach ($file in (Get-ChildItem "$tempOutputDirectoryPath" "*.ts" -Recurse))
    {
        "/* eslint-disable */`n" + (Get-Content $file.PSPath -Raw) | Set-Content $file.PSPath
        "// <auto-generated />`n" + (Get-Content $file.PSPath -Raw) | Set-Content $file.PSPath
    }

    if (Test-Path -Path "$clientOutputDirectoryPath")
    {
        # remove old output files
        Remove-Item -Path "$clientOutputDirectoryPath" -Recurse
    }

    # copy new output files
    Copy-Item -Path "$tempSrcDirectoryPath" -Destination "$clientOutputDirectoryPath" -Recurse
    $clientOutputFile = Join-Path -Path $clientOutputDirectoryPath -ChildPath "index.ts"

    if (Test-Path -Path "$clientOutputFile")
    {
        # remove old output files
        Remove-Item -Path "$clientOutputFile" 
    }

    # remove temp files
    Remove-Item -Path "$tempDirectoryPath" -Recurse
}
else
{
    Write-Host "Skipping generating TypeScript code for $clientName" -ForegroundColor Magenta
}