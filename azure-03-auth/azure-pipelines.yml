trigger: none
# trigger: master

pool:
  vmImage: ubuntu-latest

variables:
  - name: dotnetSdkVersion
    value: "6.0.x"
  - name: buildConfiguration
    value: Release
  - name: projectName
    value: AzureMasterclass
  - name: webUiName
    value: azure-masterclass
  - name: webUiFolder
    value: "src/clients/$(webUiName)"
  - name: webApiName
    value: "AzureMasterclass.Api"
  - name: webApiFolder
    value: "src/$(webApiName)"

stages:
  - stage: build_and_publish
    displayName: Build and Publish
    jobs:
      - job: BuildAndPublish
        displayName: "Build and Publish"
        steps:
          - task: Npm@1
            displayName: "Npm install"
            inputs:
              command: "install"
              workingDir: $(webUiFolder)

          - task: Npm@1
            displayName: "Npm Run Build"
            inputs:
              command: "custom"
              workingDir: $(webUiFolder)
              customCommand: "run build"

          - task: CopyFiles@2
            displayName: "Copy client into Web project"
            inputs:
              SourceFolder: "$(webUiFolder)/build"
              Contents: "**"
              TargetFolder: "$(webApiFolder)/wwwroot"
              CleanTargetFolder: true
              OverWrite: true

          - task: UseDotNet@2
            inputs:
              version: "$(dotnetSdkVersion)"
              packageType: runtime

          - task: DotNetCoreCLI@2
            displayName: "Run Tests"
            inputs:
              command: test
              projects: "$(testProjectFolder)/$(testProjectName).csproj"
              arguments: "--configuration $(buildConfiguration)"

          - task: DotNetCoreCLI@2
            displayName: "Publish the web app"
            inputs:
              command: "publish"
              publishWebProjects: false # Required so we don't publish all the src-stages
              projects: "$(webApiFolder)/$(webApiName).csproj" # Required so webApiName doesn't get published as "Output"
              arguments: "--configuration $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Output"
              workingDirectory: $(webApiFolder)

          - task: CopyFiles@2
            inputs:
              SourceFolder: "azure-03-auth" # TODO!
              Contents: "**"
              TargetFolder: "$(Build.ArtifactStagingDirectory)/azure"

          - task: PublishBuildArtifacts@1
          

  - stage: deploy_to_dev
    displayName: deploy to dev
    # variables:
    #   - group: "Dev"
    jobs:
      - job: Deploy
        displayName: "Deploy"
        steps:
          # https://learn.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml
          - download: current
            artifact: drop

          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              # deploymentScope: "Resource Group" # 'Management Group' | 'Subscription' | 'Resource Group'. Required. Deployment scope. Default: Resource Group.
              azureResourceManagerConnection: "$(ArmConnection)"
              subscriptionId: "$(SubscriptionId)"
              # action: "Create Or Update Resource Group" # 'Create Or Update Resource Group' | 'DeleteRG'. Required when deploymentScope = Resource Group. Action. Default: Create Or Update Resource Group.
              resourceGroupName: "$(projectName)" # TODO Should be a variable
              location: "Australia East"
              # templateLocation: "Linked artifact" # 'Linked artifact' | 'URL of the file'. Required. Template location. Default: Linked artifact.
              csmFile: "$(Pipeline.Workspace)/drop/azure/main.bicep"
              csmParametersFile: "$(Pipeline.Workspace)/drop/azure/main.parameters.json"
              # deploymentMode: "Incremental" 
              deploymentOutputs: "outputStorageVar"

          - task: PowerShell@2
            inputs:
              targetType: "inline"
              script: |
                $obj = ConvertFrom-Json '$(outputStorageVar)'
                Write-Host "##vso[task.setvariable variable=appServiceAppName]$($obj.appServiceAppName.value)"
                Write-Host "##vso[task.setvariable variable=appServiceAppHostName]$($obj.appServiceAppHostName.value)"
          
          ## NEW
          - template: ./replace-tokens.yml
            parameters:
              zipPath: "$(Pipeline.Workspace)/drop/Output/$(webApiName).zip"

          - task: FileTransform@1
            inputs:
              folderPath: "$(Pipeline.Workspace)/drop/Output/$(webApiName).zip"
              fileType: "json"
              targetFiles: "appsettings.json"
          ## / NEW


          # Deploy an Azure Web App for Linux or Windows
          - task: AzureWebApp@1
            inputs:
              azureSubscription: "$(ArmConnection)"
              appType: "webAppLinux"
              appName: "$(appServiceAppName)"
              package: "$(Pipeline.Workspace)/drop/Output/$(webApiName).zip"
